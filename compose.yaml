# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:

  # adminer:
  #   image: adminer
  #   restart: always
  #   ports:
  #     - 8080:8080

  server:
    build:
      context: .
      dockerfile: Dockerfile
      target: final
    # env_file:
    #   - .env
    depends_on:
      - database
    ports:
      - 3000:3000
    environment:
      - PG_DBNAME=questionsandanswers
      - PG_HOST=database
      - PG_USER=postgres
      - PG_PASSWORDFILE=/run/secrets/db-password
      - RUST_LOG=debug
    networks:
      - server-side
    secrets:
      - db-password

  database:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - db-password
    environment:
      - POSTGRES_DB=knockknock
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    networks:
      - server-side
    env_file:
      - .env
    expose:
      - 5432
    volumes:
      - data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 1s
      timeout: 5s
      retries: 10
volumes:
  data: {}

networks:
  server-side: {}

secrets:
  db-password:
    file: db/password.txt
    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker compose up`.
    #     depends_on:
    #       db:
    #         condition: service_healthy
    #   db:
    #     image: postgres
    #     restart: always
    #     user: postgres
    #     secrets:
    #       - db-password
    #     volumes:
    #       - db-data:/var/lib/postgresql/data
    #     environment:
    #       - POSTGRES_DB=example
    #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    #     expose:
    #       - 5432
    #     healthcheck:
    #       test: [ "CMD", "pg_isready" ]
    #       interval: 10s
    #       timeout: 5s
    #       retries: 5
    # volumes:
    #   db-data:
    # secrets:
    #   db-password:
    #     file: db/password.txt

